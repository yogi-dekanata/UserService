// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PasswordManagerInterface is an autogenerated mock type for the PasswordManagerInterface type
type PasswordManagerInterface struct {
	mock.Mock
}

// CreateSalt provides a mock function with given fields:
func (_m *PasswordManagerInterface) CreateSalt() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateHash provides a mock function with given fields: password, salt
func (_m *PasswordManagerInterface) GenerateHash(password string, salt string) (string, error) {
	ret := _m.Called(password, salt)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(password, salt)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(password, salt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(password, salt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyPassword provides a mock function with given fields: password, hash, salt
func (_m *PasswordManagerInterface) VerifyPassword(password string, hash string, salt string) bool {
	ret := _m.Called(password, hash, salt)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(password, hash, salt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewPasswordManagerInterface creates a new instance of PasswordManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordManagerInterface {
	mock := &PasswordManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
