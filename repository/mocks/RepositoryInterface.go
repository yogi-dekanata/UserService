// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/SawitProRecruitment/UserService/repository"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type RepositoryInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, input
func (_m *RepositoryInterface) CreateUser(ctx context.Context, input repository.UserInput) (int, error) {
	ret := _m.Called(ctx, input)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UserInput) (int, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UserInput) int); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UserInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, input
func (_m *RepositoryInterface) GetUser(ctx context.Context, input repository.GetUserInput) (*repository.UserModel, error) {
	ret := _m.Called(ctx, input)

	var r0 *repository.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.GetUserInput) (*repository.UserModel, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.GetUserInput) *repository.UserModel); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.GetUserInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, input
func (_m *RepositoryInterface) UpdateUser(ctx context.Context, input repository.UserInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UserInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryInterface creates a new instance of RepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryInterface {
	mock := &RepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
