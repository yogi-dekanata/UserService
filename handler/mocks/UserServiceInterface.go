// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	generated "github.com/SawitProRecruitment/UserService/generated"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/SawitProRecruitment/UserService/repository"
)

// UserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type UserServiceInterface struct {
	mock.Mock
}

// FetchUserByPhoneNumber provides a mock function with given fields: ctx, phoneNumber
func (_m *UserServiceInterface) FetchUserByPhoneNumber(ctx context.Context, phoneNumber string) (*repository.UserModel, error) {
	ret := _m.Called(ctx, phoneNumber)

	var r0 *repository.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*repository.UserModel, error)); ok {
		return rf(ctx, phoneNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *repository.UserModel); ok {
		r0 = rf(ctx, phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterNewUser provides a mock function with given fields: ctx, req
func (_m *UserServiceInterface) RegisterNewUser(ctx context.Context, req *generated.UserRegisterRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *generated.UserRegisterRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserServiceInterface creates a new instance of UserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceInterface {
	mock := &UserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
